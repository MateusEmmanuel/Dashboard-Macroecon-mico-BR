# 1¬∞ passo: Instalar todas as bibliotecas necess√°rias para esse projeto
# ‚Üí pip install streamlit pandas plotly requests

# 2¬∞ passo: Importando as bibliotecas
import streamlit as st # simplifica a cria√ß√£o de aplicativos web interativos para ci√™ncia de dados
import pandas as pd # ferramenta padr√£o para manipula√ß√£o e an√°lise de dados
import plotly.express as px # cria√ß√£o de gr√°ficos interativos e esteticamente agrad√°veis
import requests # pega informa√ß√µes de API's de sites
import pprint # formata a sa√≠da de dados para facilitar a leitura

# 3¬∞ passo: Puxando os dados do Banco Central do Brasil (BACEN)
def dados_bacen(codigo, data_inicial="01/09/2015", data_final="22/08/2025"):
    try:
        link_1 = f"https://api.bcb.gov.br/dados/serie/bcdata.sgs.{codigo}/dados?formato=json&dataInicial={data_inicial}&dataFinal={data_final}"
        requisicao = requests.get(link_1) # pega os dados da API
        print("üîó URL usada:", link_1)  # debug
        requisicao.raise_for_status() # Verifica se a requisi√ß√£o foi bem-sucedida
        print("üì° Status code:", requisicao.status_code)  # debug
        print("üì¶ Conte√∫do bruto:", requisicao.text[:200])  # mostra s√≥ os 200 primeiros caracteres
        requisicao = requisicao.json() # transforma em JSON
        tabela = pd.DataFrame(requisicao) # transforma a lista de dicion√°rios em um DataFrame (Tabela)
        tabela['data'] = pd.to_datetime(tabela['data'], dayfirst=True)
        tabela['valor'] = tabela['valor'].astype(float)
        return tabela
    except Exception as e:
        st.error(f"Erro ao obter dados do BACEN: {e}")
        return pd.DataFrame()
    
# 4¬∞ passo: Puxando os dados do Instituto Brasileiro de Geografia e Estat√≠stica (IBGE)
def dados_ibge(codigo, periodo, variavel): # criando uma fun√ß√£o que recebe o c√≥digo da s√©rie do IBGE
    try:
        link_2 = f"https://servicodados.ibge.gov.br/api/v3/agregados/{codigo}/periodos/{periodo}/variaveis/{variavel}?localidades=N1[all]"
        requisicao = requests.get(link_2) # pega os dados da API
        requisicao.raise_for_status()  # Verifica se a requisi√ß√£o foi bem-sucedida
        requisicao = requisicao.json() # transforma em JSON
        dados = requisicao[0]['resultados'][0]['series'][0]['serie'] # transforma a lista de dicion√°rios em um DataFrame (Tabela)
        tabela = pd.DataFrame(dados.items(), columns=['per√≠odo', 'valor'])
        tabela['per√≠odo'] = pd.to_datetime(tabela['per√≠odo'], format="%Y%m")
        tabela['valor'] = tabela['valor'].astype(float)
        return tabela
    except Exception as e:
        st.error(f"Erro ao obter dados do IBGE: {e}")
        return pd.DataFrame()

st.title("üìä Dashboard Macroecon√¥mico do Brasil") # T√≠tulo grande da p√°gina

# Taxa Selic - BACEN (c√≥digo 432)
selic = dados_bacen(432)
print("SELlC - shape:", selic.shape)
print("SELlC - colunas:", selic.columns)
print(selic.head())
fig_selic = px.line(selic, x="data", y="valor", title="Taxa Selic (%)")
st.plotly_chart(fig_selic) # mostra o gr√°fico na p√°gina do Streamlit

# C√¢mbio D√≥lar - BACEN (c√≥digo 1)
cambio = dados_bacen(1)
fig_cambio = px.line(cambio, x="data", y="valor", title="D√≥lar/Real (R$)")
st.plotly_chart(fig_cambio)

#IPCA - IBGE (c√≥digo 1737, per√≠odo 200001-202507, vari√°vel 2265)
ipca = dados_ibge(1737, "200001-202507", 2265)
fig_ipca = px.line(ipca, x="per√≠odo", y="valor", title="IPCA (%)")
st.plotly_chart(fig_ipca)

# PIB Trimestral - IBGE (c√≥digo 2072, per√≠odo 200001-202501, vari√°vel 933)
pib = dados_ibge(2072, "200001-202501", 933)
fig_pib = px.bar(pib, x="per√≠odo", y="valor", title="PIB Trimestral (R$ Milh√µes)")
st.plotly_chart(fig_pib)

# Taxa de Desemprego - IBGE (c√≥digo 6381, per√≠odo 201203-202506, vari√°vel 4099)
desemprego = dados_ibge(6381, "201203-202506", 4099)
fig_desemprego = px.line(desemprego, x="per√≠odo", y="valor", title="Taxa de Desemprego (%)")
st.plotly_chart(fig_desemprego)